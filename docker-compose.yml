version: "3.8"

services:
    postgres:
        image: postgres:16-alpine
        container_name: dice_postgres
        environment:
            POSTGRES_DB: ${DB_NAME:-dice_db}
            POSTGRES_USER: ${DB_USER:-dice_user}
            POSTGRES_PASSWORD: ${DB_PASSWORD:-dice_password}
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dice_user}"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - dice_network

    elasticsearch:
        image: elasticsearch/elasticsearch:9.1.5
        container_name: dice_elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
            - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
        volumes:
            - es_data:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -f http://localhost:9200/_cluster/health || exit 1",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - dice_network

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: dice_backend
        command: >
            sh -c "
              echo 'Waiting for services...' &&
              sleep 10 &&
              python manage.py migrate &&
              python manage.py seed_connectors &&
              python manage.py seed_analytics &&
              python manage.py load_news --sample &&
              echo 'Starting server...' &&
              gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120
            "
        environment:
            - DJANGO_SETTINGS_MODULE=backend.settings.production
            - SECRET_KEY=${SECRET_KEY:-django-insecure-change-this-in-production}
            - DEBUG=${DEBUG:-False}
            - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,backend}
            - DB_NAME=${DB_NAME:-dice_db}
            - DB_USER=${DB_USER:-dice_user}
            - DB_PASSWORD=${DB_PASSWORD:-dice_password}
            - DB_HOST=postgres
            - DB_PORT=5432
            - ES_HOST=http://elasticsearch:9200
            - ES_INDEX_NEWS=${ES_INDEX_NEWS:-news_articles}
            - ES_INDEX_DOCS=${ES_INDEX_DOCS:-documents}
            - OPENAI_API_KEY=${OPENAI_API_KEY:-}
            - OPENAI_MODEL=${OPENAI_MODEL:-gpt-3.5-turbo}
            - EMBEDDING_MODEL=${EMBEDDING_MODEL:-sentence-transformers/all-MiniLM-L6-v2}
            - EMBEDDING_DIMENSION=${EMBEDDING_DIMENSION:-384}
            - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:5173,http://localhost:3000}
            - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS:-http://localhost:5173,http://localhost:3000}
        volumes:
            - ./backend:/app
            - media_files:/app/media
            - static_files:/app/staticfiles
        ports:
            - "8000:8000"
        depends_on:
            postgres:
                condition: service_healthy
            elasticsearch:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - dice_network

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        container_name: dice_frontend
        ports:
            - "5173:80"
        depends_on:
            - backend
        environment:
            - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
        networks:
            - dice_network

    # Optional: n8n for workflow automation
    n8n:
        image: n8nio/n8n:latest
        container_name: dice_n8n
        ports:
            - "5678:5678"
        environment:
            - N8N_BASIC_AUTH_ACTIVE=true
            - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
            - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-admin}
        volumes:
            - n8n_data:/home/node/.n8n
        profiles:
            - optional
        networks:
            - dice_network

volumes:
    postgres_data:
    es_data:
    media_files:
    static_files:
    n8n_data:

networks:
    dice_network:
        driver: bridge
